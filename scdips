#!/usr/bin/perl
###############################################################################
# Copyright (c) 2015 by bgvanbur
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
###############################################################################

use strict;
use warnings;

if ( $#ARGV < 2 ) {
    &Help();
}

my $type = shift @ARGV;
my $make = 0;
if ( $type =~ /^\s*patch\s*$/i ) {
    $make = 0;
} elsif ( $type =~ /^\s*make\s*$/i ) {
    $make = 1;
# } elsif ( $type =~ /^\s*text\s*$/i ) {
#     $make = 2;
} else {
    print STDERR "Need to specify convert or make\n";
    &Help();
}

if ( $#ARGV < 1 || $#ARGV > 2 ) {
    &Help();
}

my $ipsFile = $ARGV[0];
my $romFile0 = $ARGV[1];
my $romFile1 = $#ARGV < 2 ? $romFile0 : $ARGV[2];

my $verbosity = 2;

my $romFile0Length = -s $romFile0;
my $romFile0Data = '';

open( ROM, $romFile0 ) or die "Could not read file: $romFile0\n";
binmode ROM;
read( ROM, $romFile0Data, $romFile0Length );
close ROM;

sub IPSMakeRecord {
    my ($diffStart,$diffEnd,$data) = @_;
    my $ipsData = '';
    # avoid invalid large start
    if ( $diffStart > 0xFFFFFF ) {
	$diffStart = 0xFFFFFF;
    }
    if ( $diffStart == 0x454F46 ) {
	$diffStart--;
    }
    while ( $diffStart <= $diffEnd ) {
	my $diffLength = $diffEnd-$diffStart+1;
	my $diffStartNext;
	if ( $diffLength > 0xFFFF ) {
	    $diffStartNext = $diffStart + 0xFFFF;
	    if ( $diffStartNext > 0xFFFFFF ) {
		$diffStartNext = 0xFFFFFF;
	    }
	} else {
	    $diffStartNext = $diffStart + $diffLength;
	}
	my $size = $diffStartNext-$diffStart;
	$ipsData .=
	    substr(pack("N",$diffStart),1,3) .
	    pack("n",$size) .
	    substr($data,$diffStart,$size);
	if ( $verbosity >= 2 ) {
	    printf("IPS normal record: offset=0x%6.6X size=0x%4.4X\n",$diffStart,$size);
	}
	$diffStart = $diffStartNext;
    }
    return $ipsData;
}

if ( $make == 1 ) {
    my $romFile1Length = -s $romFile1;
    my $romFile1Data = '';

    if ( $romFile1Length < $romFile0Length ) {
	die "Cannot create patch which makes file smaller\n";
    }
    if ( $romFile1Length > 0xFFFFFF + 0xFFFF ) {
	die "File exceeds patch length\n";
    }

    open( ROM, $romFile1 ) or die "Could not read file: $romFile1\n";
    binmode ROM;
    read( ROM, $romFile1Data, $romFile1Length );
    close ROM;

    my $ipsData = '';

    my $diffStart = 0;
    my $diffEnd = 0;
    my $diffIn = 0;
    # can make it align on other boundaries besides per byte...
    my $operandSize = 1;
    # if differences have 5 bytes the same in the middle same amount of
    # bytes in patch
    # does not do RLE intentionally since may not be supported everywhere
    for ( my $i = 0; $i < $romFile1Length; $i += $operandSize ) {
	if ( $i + $operandSize > $romFile0Length ) {
	    if ( ! $diffIn ) {
		$diffStart = $i;
	    }
	    $diffIn = 0;
	    $ipsData .= &IPSMakeRecord($diffStart,$romFile1Length-1,$romFile1Data);
	    last;
	}
	if ( substr($romFile0Data,$i,$operandSize) ne substr($romFile1Data,$i,$operandSize) ) {
	    if ( ! $diffIn ) {
		$diffStart = $i;
		$diffIn = 1;
	    }
	    $diffEnd = $i + $operandSize - 1;
	} else {
	    if ( $diffIn && $i > $diffEnd + 5 ) {
		$ipsData .= &IPSMakeRecord($diffStart,$diffEnd,$romFile1Data);
		$diffIn = 0;
	    }
	}
    }
    if ( $diffIn ) {
	$ipsData .= &IPSMakeRecord($diffStart,$diffEnd,$romFile1Data);
    }

    if ( $ipsData eq '' ) {
	die "No patch needed.\n";
    }

    $ipsData = 'PATCH'.$ipsData.'EOF';

    open( IPS, '>'.$ipsFile ) or die "Could not read file: $ipsFile\n";
    binmode IPS;
    print IPS $ipsData;
    close IPS;
} elsif ( $make == 0 ) {
    my $ipsLength = -s $ipsFile;
    my $ipsData = '';

    open( IPS, $ipsFile ) or die "Could not read file: $ipsFile\n";
    binmode IPS;
    read( IPS, $ipsData, $ipsLength );
    close IPS;

    my $romFile1Data = $romFile0Data;

    my $ipsOffset = 5;

    if ( $ipsLength < 8 || substr($ipsData,0,5) ne 'PATCH' ) {
	die "Not a valid IPS file: $ipsFile\n";
    }

    if ( $verbosity >= 2 ) {
	print "IPS PATCH\n";
    }

    while (1) {
	if ( $ipsOffset + 3 > $ipsLength ) {
	    die "Invalid IPS data since searching past end of file for more records\n";
	}
	my $offsetString = substr($ipsData,$ipsOffset,3);
	$ipsOffset += 3;
	if ( $offsetString eq "EOF" ) {
	    if ( $verbosity >= 2 ) {
		print "IPS EOF\n";
	    }
	    last;
	}
	my $offset = unpack("N",chr(0x00).$offsetString);
	if ( $ipsOffset + 2 > $ipsLength ) {
	    die "Invalid IPS data\n";
	}
	my $sizeString = substr($ipsData,$ipsOffset,2);
	$ipsOffset += 2;
	my $size = unpack("n",$sizeString);
	if ( $size > 0 ) {
	    # normal patch record
	    if ( $verbosity >= 2 ) {
		printf("IPS normal record: offset=0x%6.6X size=0x%4.4X\n",$offset,$size);
	    }
	    if ( $ipsOffset + $size > $ipsLength ) {
		die "Invalid IPS data\n";
	    }
	    if ( $offset > $romFile0Length ) {
		print STDERR "IPS patch is skipping bytes between end and patch, inserting zeros\n";
	    }
	    if ( $offset + $size > $romFile0Length ) {
		# need to lengthen the ROM
		$romFile1Data .= chr(0x00) x ( $offset + $size - $romFile0Length );
		$romFile0Length = $offset + $size;
	    }
	    my $data = substr($ipsData,$ipsOffset,$size);
	    substr($romFile1Data,$offset,$size) = $data;
	    $ipsOffset += $size;
	} else {
	    # RLE patch record
	    if ( $ipsOffset + 3 > $ipsLength ) {
		die "Invalid IPS data\n";
	    }
	    my $repeatString = substr($ipsData,$ipsOffset,2);
	    $ipsOffset += 2;
	    my $repeat = unpack("n",$repeatString);
	    my $data = substr($ipsData,$ipsOffset,1);
	    $ipsOffset += 1;
	    if ( $verbosity >= 2 ) {
		printf("IPS RLE record: offset=0x%6.6X repeat=0x%4.4X data=0x%2.2X\n",$offset,$repeat,ord($data));
	    }
	    if ( $offset > $romFile0Length ) {
		print STDERR "IPS patch is skipping bytes between end and patch, inserting zeros\n";
	    }
	    if ( $offset + $repeat > $romFile0Length ) {
		# need to lengthen the ROM
		$romFile1Data .= chr(0x00) x ( $offset + $repeat - $romFile0Length );
		$romFile0Length = $offset + $repeat;
	    }
	    substr($romFile1Data,$offset,$repeat) = ( $data x $repeat );
	}
    }

    if ( $ipsOffset != $ipsLength ) {
	print STDERR "Unused data at end of IPS file?\n";
    }

    open( ROM, '>'.$romFile1 ) or die "Could not read file: $romFile1\n";
    binmode ROM;
    print ROM $romFile1Data;
    close ROM;
# } elsif ( $make == 2 ) {
#     # text
#     open( TEXT, $ipsFile ) or die "Could not read file: $ipsFile\n";

#     my $romFile1Data = $romFile0Data;

#     while ( my $textLine = <TEXT> ) {
# 	chomp $textLine;
# 	# remove comments (;)
# 	$textLine =~ s/^([^;]*);.*$/$1/;
# 	my $addr = 0;
# 	my $src = '';
# 	my $dest = '';
# 	if ( $textLine =~ /^\s*(?:0x|\$)([0-9A-F]+)\s*:\s*(?:0x|\$)([0-9A-F]+)\s*->\s*(?:0x|\$)([0-9A-F]+)\s*$/ ) {
# 	    $addr = hex($1);
# 	    $src = $2;
# 	    $dest = $3;
# 	} elsif ( $textLine =~ /^\s*(?:0x|\$)([0-9A-F]+)\s*:\s*(?:0x|\$)([0-9A-F]+)\s*$/ ) {
# 	    $addr = hex($1);
# 	    $dest = $2;
# 	} elsif ( $textLine !~ /^\s*$/ ) {
# 	    die "Unparsed line: $textLine\n";
# 	}
# 	if ( $src ne '' ) {
# 	    my $srcPacked = pack("H*",$src);
# 	    my $srcPackedLength = length($srcPacked);
# 	    if ( $addr+$srcPackedLength <= $romFile0Length &&
# 		 substr($romFile1Data,$addr,$srcPackedLength) eq $srcPacked ) {
# 		# src matches
# 	    } else {
# 		print STDERR "textline: ".$textLine."\n";
# 		print STDERR "source: ".unpack("H*",substr($romFile1Data,$addr,$srcPackedLength))."\n";
# 		die "Source data in text patch does not match binary file data for address\n";
# 	    }
# 	}
# 	if ( $dest ne '' ) {
# 	    my $destPacked = pack("H*",$dest);
# 	    my $destPackedLength = length($destPacked);
# 	    # print "$textLine: $destPackedLength\n";
# 	    if ( $addr+$destPackedLength <= $romFile0Length ) {
# 		substr($romFile1Data,$addr,$destPackedLength) = $destPacked;
# 	    } else {
# 		die "Dest data does not fit\n";
# 	    }
# 	}
#     }
#     close TEXT;

#     open( ROM, '>'.$romFile1 ) or die "Could not read file: $romFile1\n";
#     binmode ROM;
#     print ROM $romFile1Data;
#     close ROM;
} else {
    die "Bad logic\n";
}



sub Help {
    die '
scdips patch <ipsfile> <binfile> [binfileout]
scdips make  <ipsfile> <binfileoriginal> <binfileupdated>

[description]
  Patch updates binary file using IPS format. If binfileout is not specified
    updates binfile.
  Make makes a IPS file based on original and updated file.

';
# removed text option, using scdpatchasm instead for my hacks
#
# scdips text <ipsfile> <binfile> [binfileout]
#
#   Text uses a text based file for patching.
#     ; comments
#     $00100 : $00 -> $FF
#     $00102 : $80
}
