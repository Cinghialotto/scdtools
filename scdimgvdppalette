#!/usr/bin/env perl
###############################################################################
# Copyright (c) 2011 by bgvanbur
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
###############################################################################
# convert images to VDP friendly images for megadrive/megacd development
###############################################################################

# TODO more verbosity...

use strict;
use warnings;
use Image::Magick;

use FindBin;
use lib $FindBin::Bin;
use SCDTools::Palette;

my $palette = SCDTools::Palette->new();

if ( $#ARGV < 0 ) {
    &Help();
}

my $verbosity = 2;

my @imgFiles;

my $resizeWidth = 0;
my $resizeHeight = 0;
my $resizeKeepAspect = 0;
my $resizeToTiles = 0;
my $trim = 0;
my $ditherOrdered = '';
my $ditherVdp = 'fs';
my $ditherQuantize = 'fs';
my $ditherFinal = 'fs';
# recommended to be log2(colors), and going bigger to 8 doesn't seem to effect
# final image but drastically lengthen the time to run
my $treedepth = 4;
my $debug = 0;

my $colorCountMax = 0;

foreach my $arg (@ARGV) {
    if ( $palette->ParseArg($arg) ) {
	# do nothing
    } elsif ( $arg =~ /^-resize=(\d+)x(\d+)$/i ) {
	$resizeWidth = $1;
	$resizeHeight = $2;
    } elsif ( $arg =~ /^-resizeKeepAspect$/i ) {
	$resizeKeepAspect = 1;
    } elsif ( $arg =~ /^-resizetotiles?$/i ) {
	$resizeToTiles = 1;
    } elsif ( $arg =~ /^-resizetoeventiles?$/i ) {
	$resizeToTiles = 2;
    } elsif ( $arg =~ /^-dither=(2x2|4x2|2x4|4x4|8x8)$/i ) {
	$ditherOrdered = $1;
	$ditherVdp = 'none';
	$ditherQuantize = 'none';
	$ditherFinal = 'none';
    } elsif ( $arg =~ /^-dither=(none|r|fs)$/i ) {
	$ditherVdp = lc($1);
	$ditherQuantize = lc($1);
	$ditherFinal = lc($1);
    } elsif ( $arg =~ /^-dithervdp=(none|r|fs)$/i ) {
	$ditherVdp = lc($1);
    } elsif ( $arg =~ /^-ditherquantize=(none|r|fs)$/i ) {
	$ditherQuantize = lc($1);
    } elsif ( $arg =~ /^-ditherfinal=(none|r|fs)$/i ) {
	$ditherFinal = lc($1);
    } elsif ( $arg =~ /^-maxcolors=(\d+)$/i ) {
	$colorCountMax = $1;
    } elsif ( $arg =~ /^-trim$/i ) {
	$trim = 1;
    } elsif ( $arg =~ /^-debug$/i ) {
	$debug = 1;
    } elsif ( -e $arg ) {
	push @imgFiles, $arg;
    } else {
	print STDERR "\nCould not parse argument: $arg\n";
	&Help();
    }
}

$palette->ReadPalette();
$palette->SetPaletteCount(512/15);

if ( $colorCountMax <= 0 ) {
    $colorCountMax = $palette->GetColorsPerPalette();
}

foreach my $imgFile (@imgFiles) {
    &ImgExtractColors($imgFile);
}



###############################################################################


sub ImgExtractColors($) {
    my ($imgFile) = @_;

    my $imgOriginal = Image::Magick->new();
    my $x = $imgOriginal->ReadImage($imgFile);
    warn $x if $x;

    if ( $trim ) {
	$imgOriginal->Trim();
    }

    if ( $resizeWidth && $resizeHeight ) {
	my $width = $imgOriginal->Get('width');
	my $height = $imgOriginal->Get('height');
	my $widthNew = $resizeWidth;
	my $heightNew = $resizeHeight;
	if ( $resizeKeepAspect ) {
	    if      ( $width * $resizeHeight > $height * $resizeWidth ) {
		$heightNew = int( ( $height * $resizeWidth / $width ) + .5 );
	    } elsif ( $width * $resizeHeight < $height * $resizeWidth ) {
		$widthNew = int( ( $width * $resizeHeight / $height ) + .5 );
	    }
	}
	# possible filters: Point, Box, Triangle, Hermite, Hanning, Hamming, Blackman, Gaussian, Quadratic, Cubic, Catrom, Mitchell, Lanczos, Bessel, Sinc
	$imgOriginal->Resize('width'=>$widthNew,'height'=>$heightNew,'filter'=>'Cubic');
	if ( $resizeWidth != $widthNew || $resizeHeight != $heightNew ) {
	    my $x = (($resizeWidth-$widthNew)>>1);
	    my $y = (($resizeHeight-$heightNew)>>1);
	    $imgOriginal->Extent('width'=>$resizeWidth,'height'=>$resizeHeight,'background'=>'rgb(0,0,0)');
	    $imgOriginal->Roll('x'=>$x,'y'=>$y);
	}
    }

    if ( $resizeToTiles ) {
	my $width = $imgOriginal->Get('width');
	my $height = $imgOriginal->Get('height');
	my $boundary = $resizeToTiles*8;
	if ( $width % $boundary != 0 || $height % $boundary != 0 ) {
	    my $widthNew = int(($width+$boundary-1)/$boundary) * $boundary;
	    my $heightNew = int(($height+$boundary-1)/$boundary) * $boundary;
	    my $x = (($widthNew-$width)>>1);
	    my $y = (($heightNew-$height)>>1);
	    # offsets don't work with newer versions of image magick for extent
	    #$imgOriginal->Extent('width'=>$widthNew,'height'=>$heightNew,'x'=>$x,'y'=>$y,'background'=>'rgb(0,0,0)');
	    #$imgOriginal->Extent('geometry'=>"${widthNew}x${heightNew}+${x}+${y}",'background'=>'rgb(0,0,0)');
	    if ( $widthNew != $width || $heightNew != $height ) {
		# so instead we can extent and roll
		$imgOriginal->Extent('width'=>$widthNew,'height'=>$heightNew,'background'=>'rgb(0,0,0)');
		$imgOriginal->Roll('x'=>$x,'y'=>$y);
	    }
	}
    }

    if ( $ditherOrdered ne '' ) {
	my $width = $imgOriginal->Get('width');
	my $height = $imgOriginal->Get('height');
	for ( my $y = 0; $y < $height; $y++ ) {
	    for ( my $x = 0; $x < $width; $x++ ) {
		my @colors = $imgOriginal->GetPixel('channel'=>'RGB','normalize'=>1,'x'=>$x,'y'=>$y);
		# normalize (/256) and force onto 3 bit color (/8)
		my $orderedDitherAdd = &SCDTools::Palette::GetOrderedDitherAdd($ditherOrdered,$x,$y)/2048.0;
		for ( my $c = 0; $c < 3; $c++ ) {
		    $colors[$c] += $orderedDitherAdd;
		    if ( $colors[$c] > 1 ) {
			$colors[$c] = 1;
		    }
		}
		$imgOriginal->SetPixel('channel'=>'RGB','x'=>$x,'y'=>$y,'color'=>\@colors);
	    }
	}
    }
		
    my $img = $imgOriginal->Clone();

    if ( $palette->GetColorsCountRead() >= $colorCountMax ) {
	# palette read in already too big, make sure to remove extra colors
	$palette->SetMaxColorCount($colorCountMax);
    } else {
	$palette->Reset();
	$palette->AddColorsFromImageMagickImage($img);
    }

    my $colorsLength = $palette->GetColorsCount();

    my $imgPalette = Image::Magick->new();
    $palette->UpdateImageMagickPalette($imgPalette);
    
    if ( $debug ) {
	my $file = 'scdimgvdppalette_debugpal0_'.$imgFile;
	print "Writing $file (VDP color palette for original image)\n";
	$imgPalette->Write($file);
    }

    if ( $colorsLength > $colorCountMax ) {
	if ( $ditherVdp eq 'none' ) {
	    $img->Remap('image'=>$imgPalette,dither=>'false');
	} elsif ( $ditherVdp eq 'r' ) {
	    $img->Remap('image'=>$imgPalette,dither=>'true','dither-method'=>'Riemersma');
	} elsif ( $ditherVdp eq 'fs' ) {
	    $img->Remap('image'=>$imgPalette,dither=>'true','dither-method'=>'Floyd-Steinberg');
	} else {
	    die "Bad dither final: $ditherVdp\n";
	}

	if ( $debug ) {
	    my $file = 'scdimgvdppalette_debugimg0_'.$imgFile;
	    print "Writing $file (mapped to VDP colors, too many colors for single palette still)\n";
	    $img->Write($file);
	}

	undef $imgPalette;

	$img = $imgOriginal->Clone();

	if ( $ditherQuantize eq 'none' ) {
	    $img->Quantize('colors'=>$colorCountMax,'measure_error'=>'true','treedepth'=>$treedepth,'dither'=>'false');
	} elsif ( $ditherQuantize eq 'r' ) {
	    $img->Quantize('colors'=>$colorCountMax,'measure_error'=>'true','treedepth'=>$treedepth,'dither'=>'true','dither-method'=>'Riemersma');
	} elsif ( $ditherQuantize eq 'fs' ) {
	    $img->Quantize('colors'=>$colorCountMax,'measure_error'=>'true','treedepth'=>$treedepth,'dither'=>'true','dither-method'=>'Floyd-Steinberg');
	} else {
	    die "Bad dither final: $ditherQuantize\n";
	}

	if ( $debug ) {
	    my $file = 'scdimgvdppalette_debugimg1_'.$imgFile;
	    print "Writing $file (quantized to $colorCountMax VDP colors)\n";
	    $img->Write($file);
	}

	$palette->Reset();
	$palette->AddColorsFromImageMagickImage($img);
	$colorsLength = $palette->GetColorsCount();

	# quantization got less than desired amount of colors
	# add in the most used ones that are missing
	if ( $colorsLength < $colorCountMax ) {
	    # add in all the colors then trim to desired amount of colors
	    $palette->AddColorsFromImageMagickImage($imgOriginal);
	    $palette->SetMaxColorCount($colorCountMax);
	}

	$colorsLength = $palette->GetColorsCount();

	if ( $colorsLength > $colorCountMax ) {
	    print STDERR "Quantization went beyond color count\n";
	    $palette->SetMaxColorCount($colorCountMax);
	}

	$colorsLength = $palette->GetColorsCount();

	print "Quantization resulted in $colorsLength VDP colors\n";

	$imgPalette = Image::Magick->new();
	$palette->UpdateImageMagickPalette($imgPalette);

	if ( $debug ) {
	    my $file = 'scdimgvdppalette_debugpal1_'.$imgFile;
	    print "Writing $file (VDP color palette after quantization)\n";
	    $imgPalette->Write($file);
	}

	$img = $imgOriginal->Clone();
    } elsif ( $palette->GetColorsCountRead() != $palette->GetColorsCount() ) {
	print "Image only has $colorsLength VDP colors\n";
    }

    print "$ditherFinal\n";
    if ( $ditherFinal eq 'none' ) {
	$img->Remap('image'=>$imgPalette,dither=>'false');
    } elsif ( $ditherFinal eq 'r' ) {
	$img->Remap('image'=>$imgPalette,dither=>'true','dither-method'=>'Riemersma');
    } elsif ( $ditherFinal eq 'fs' ) {
	$img->Remap('image'=>$imgPalette,dither=>'true','dither-method'=>'Floyd-Steinberg');
    } else {
	die "Bad dither final: $ditherFinal\n";
    }

    {
	my $file = 'scdimgvdppalette_'.$imgFile;
	if ( $debug ) {
	    print "Writing $file (original image dithered to quatized colors)\n";
	}
	$img->Write($file);
    }
}

sub Help {
    die '
scdimgvdppalette [options] <imgfiles>

[description]
  Convert image to Sega VDP palette with dithering/quantization.
  It is suggested to avoid transparency since they can become partially
  transparent in the process and typically result in ugly edges.
  Still a work in progress.

'.$palette->GetHelpString().'[options]
  -maxcolors=<#>             specify max colors (default 15)
  -trim                      trims outside of image
  -resize=<x>x<y>            resize to a specific size
  -resizekeepaspect          keep aspect for -resize=
  -resizetotiles             resize the image to a tile boundary
                             (centered and uses black for pixel fill)
  -resizetoeventiles         resize the image to an even tile boundary
                             (centered and uses black for pixel fill)

[dither options]
  -dither=<dither>           set all dithering
  -dithervdp=<dither>        set dithering of palette to VDP colors
  -ditherquantize=<dither>   set dithering of palette quantization
  -ditherfinal=<dither>      set dithering of final image
  <dither>                   none - no dithering
                             r    - Riemersma dithering
                             fs   - Floyd-Steinberg dithering (default)
                             2x2  - ordered 2x2
                             4x2  - ordered 4x2
                             4x4  - ordered 4x4

';
}
